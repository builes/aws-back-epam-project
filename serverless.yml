# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Product-Service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:us-east-1:937617902840:table/products"
        - "arn:aws:dynamodb:us-east-1:937617902840:table/stocks"

plugins:
  - serverless-offline

functions:
  getProductList: # this name will be used as a function name in AWS
    handler: getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: get
    # this is how you can add environment variables to your function, are only available in the function scope
    # in this case we are adding a variable named `PRODUCTS_TABLE` and its value is ref to DynamoDB table
    environment:
      PRODUCTS_TABLE: !Ref products
      STOCKS_TABLE: !Ref stocks

  getProductsById:
    handler: getProductsById.getProductsById
    events:
      - http:
          path: /products/{id}
          method: get
    environment:
      PRODUCTS_TABLE: !Ref products
      STOCKS_TABLE: !Ref stocks

  createProduct:
    handler: createProduct.createProduct
    events:
      - http:
          path: /products
          method: post
    environment:
      PRODUCTS_TABLE: !Ref products

resources:
  Resources:
    products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    stocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
